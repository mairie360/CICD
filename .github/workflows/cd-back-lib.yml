name: Back lib CD

on:
  workflow_call:
    secrets:
      CPANEL_API_TOKEN:
        required: true
      CPANEL_SERVER:
        required: true
      CPANEL_USERNAME:
        required: true
      MAIRIE_360_DEPLOY_TOKEN:
        required: false

jobs:
  check_validity:
    uses: ./.github/workflows/ci-back-lib.yml

  publish_release:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          TAG="v${{ steps.extract_version.outputs.version }}"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/releases/tags/$TAG")
          echo "exists=false" >> $GITHUB_OUTPUT
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          gh release create "v${{ steps.extract_version.outputs.version }}" \
            --title "Release v${{ steps.extract_version.outputs.version }}" \
            --notes "Automated release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_release:
    runs-on: ubuntu-latest
    env:
      CPANEL_API_TOKEN: ${{ secrets.CPANEL_API_TOKEN }}
      CPANEL_SERVER: ${{ secrets.CPANEL_SERVER }}
      CPANEL_USERNAME: ${{ secrets.CPANEL_USERNAME }}
      MAIRIE_360_DEPLOY_TOKEN: ${{ secrets.MAIRIE_360_DEPLOY_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq openssh-client

      # - name: Setup SSH key
      #   run: |
      #     set -x
      #     mkdir -p ~/.ssh
      #     echo "Secret key length: ${#DEPLOY_SSH_KEY}"
      #     printf "%s" "$DEPLOY_SSH_KEY" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ls -l ~/.ssh
      #     head -n 5 ~/.ssh/id_rsa
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true
      #     ssh-keyscan mairie360-eip.fr >> ~/.ssh/known_hosts 2>/dev/null || true
      #   env:
      #     DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: Get latest GitHub release version
        id: get_release
        run: |
          VERSION=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | jq -r .tag_name)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # - name: Run publish script
      #   run: ./ci-tools/scripts/publish.sh "$VERSION"
      #   env:
      #     MAIRIE_360_DEPLOY_TOKEN: ${{ secrets.MAIRIE_360_DEPLOY_TOKEN }}

      - name: Get runner's public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Whitelist IP on hosting & delete old ones (o2switch)
        shell: bash
        run: |
          ENDPOINT='frontend/o2switch/o2switch-ssh-whitelist/index.live.php'
          API_TOKEN=${{ secrets.CPANEL_API_TOKEN }}
          SERVER=${{ secrets.CPANEL_SERVER }}
          USERNAME=${{ secrets.CPANEL_USERNAME }}

          echo "Get actual whitelisted IPs..."
          RESPONSE=$(curl -sX GET "https://${SERVER}:2083/${ENDPOINT}?r=list&api_token=${API_TOKEN}&username=${USERNAME}")
          echo "Response: ${RESPONSE}"
          UNIQUE_IPS=$(echo "${RESPONSE}" | jq -r '.data.list[] | .address' | sort -u)

          for address in $UNIQUE_IPS; do
            echo "Delete this GitHub IP: $address (in & out)"
            curl -sX GET "https://${SERVER}:2083/${ENDPOINT}?r=remove&address=$address&direction=in&port=22&api_token=${API_TOKEN}&username=${USERNAME}" | jq
            sleep 3
            curl -sX GET "https://${SERVER}:2083/${ENDPOINT}?r=remove&address=$address&direction=out&port=22&api_token=${API_TOKEN}&username=${USERNAME}" | jq
            sleep 3
          done
          echo "All non-whitelisted IPs deleted!"

          echo "Attempt to whitelist IP..."
          curl -sX POST -d "whitelist[address]=${{ steps.ip.outputs.ipv4 }}" -d "whitelist[port]=22" "https://${SERVER}:2083/${ENDPOINT}?r=add&api_token=${API_TOKEN}&username=${USERNAME}" | jq

